part of '../constants.dart';

class DynamicLinkService {
  DynamicLinkParameters defaultParameters() {
    return DynamicLinkParameters(
        uriPrefix: firebaseDynamicLinkConfig['uriPrefix'],
        link: Uri.parse(firebaseDynamicLinkConfig['link']),
        androidParameters: AndroidParameters(
          packageName: firebaseDynamicLinkConfig['androidPackageName'],
          minimumVersion: firebaseDynamicLinkConfig['androidAppMinimumVersion'],
        ),
        iosParameters: IosParameters(
          bundleId: firebaseDynamicLinkConfig['iOSBundleId'],
          minimumVersion: firebaseDynamicLinkConfig['iOSAppMinimumVersion'],
          appStoreId: firebaseDynamicLinkConfig['iOSAppStoreId'],
        ));
  }

  DynamicLinkParameters productParameters(
      {String productUrl, String productId}) {
    return DynamicLinkParameters(
        uriPrefix: firebaseDynamicLinkConfig['uriPrefix'],
        link: Uri.parse(productUrl),
        socialMetaTagParameters: SocialMetaTagParameters(
          description: productId,
        ),
        androidParameters: AndroidParameters(
          packageName: firebaseDynamicLinkConfig['androidPackageName'],
          minimumVersion: firebaseDynamicLinkConfig['androidAppMinimumVersion'],
        ),
        iosParameters: IosParameters(
          bundleId: firebaseDynamicLinkConfig['iOSBundleId'],
          // minimumVersion: firebaseDynamicLinkConfig['iOSAppMinimumVersion'],
          appStoreId: firebaseDynamicLinkConfig['iOSAppStoreId'],
        ),
        navigationInfoParameters: NavigationInfoParameters());
  }

  Future<Uri> generateFirebaseDynamicLink(DynamicLinkParameters params) async {
    final dynamicUrl = await params.buildUrl();
    printLog('[dynamic_link] Autogenerated Firebase Dynamic Link: $dynamicUrl');
    return dynamicUrl;
  }

  static void initDynamicLinks(BuildContext context) async {
    final data = await FirebaseServices().dynamicLinks?.getInitialLink();

    await _handleDynamicLink(data, context);

    FirebaseServices().dynamicLinks?.onLink(
        onSuccess: (PendingDynamicLinkData dynamicLink) async {
      await _handleDynamicLink(dynamicLink, context);
    }, onError: (OnLinkErrorException e) async {
      printLog('onLinkError');
      printLog(e.message);
    });
  }

  // void navigateToProductDetail(String productID) async {
  //   final product = await Services().api.getProduct(productID);
  //   await Navigator.of(context).pushNamed(
  //     RouteList.productDetail,
  //     arguments: product,
  //   );
  // }

  static Future<void> _handleDynamicLink(
      PendingDynamicLinkData data, BuildContext context) async {
    try {
      final deepLink = data?.link;
      if (deepLink == null) {
        return;
      }
      var link = deepLink.toString();
      printLog('deepLink is $link');
      //deepLink URL will look like: https://mstore.io/?productId=26028/ware-backpack-in-burgundy-product-add-ons/
      if (link.contains('productId')) {
        //Permalink will always be in the same format, with ?productId config from permalink settings.
        var productId = link.split('/')[3].split('=')[1];
        final product = await Services().api.getProduct(productId);
        await Navigator.of(context).pushNamed(
          RouteList.productDetail,
          arguments: product,
        );
      }
    } catch (err) {
      printLog('[dynamic_link] error: ${err.toString()}');
    }
  }
}
